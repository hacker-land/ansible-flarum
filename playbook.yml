---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [
        'aptitude',
        'curl',
        'zip',
        'unzip',
        'gzip',
        'wget',
        'git',
        'software-properties-common',
        'ca-certificates',
        'apt-transport-https'
      ]

    - name: Add php stable repository from PPA and install its signing key on Ubuntu target
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php

    - name: Install Nginx-Mysql Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [
        'nginx',
        'libnginx-mod-http-geoip',
        'geoip-database',
        'mysql-server',
        'mysql-client',
        'python3-pymysql' # for ansible to set the mysql root password
      ]

    - name: Install PHP Packages
      apt: name={{ item }} update_cache=yes state=latest install_recommends=false
      loop: [
        'php8.3',
        'php8.3-fpm',
        'php8.3-common',
        'php8.3-cli',
        'php8.3-imagick',
        'php8.3-gd',
        'php8.3-mysql',
        'php8.3-imap',
        'php8.3-mbstring',
        'php8.3-xml',
        'php8.3-xmlrpc',
        'php8.3-xsl',
        'php8.3-soap',
        'php8.3-zip',
        'php8.3-curl',
        'php8.3-bcmath',
        'php8.3-intl',
        'php8.3-pdo-mysql',
        'php-redis',
      ]

    # Nginx Configuration
    - name: Sets Nginx conf file
      template:
        src: "files/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ http_conf_name }}"
      notify: Reload Nginx

    - name: Enables new site
      file:
        src: "/etc/nginx/sites-available/{{ http_conf_name }}"
        dest: "/etc/nginx/sites-enabled/{{ http_conf_name }}"
        state: link
      notify: Reload Nginx

    - name: Removes "default" site
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent
      notify: Reload Nginx

    # MySQL Configuration
    - name: Check .setup flag
      stat:
        path: /etc/mysql/.setup
      register: mysql_setup

    - name: Stop service mysql, if started
      ansible.builtin.service:
        name: mysql
        state: stopped
      when: mysql_setup.stat.exists == false

    - name: Creates MySql data directory
      file:
        path: "{{ mysql_datadir }}"
        state: directory
        owner: mysql
        group: mysql
        mode: 0750
        recurse: yes
      when: mysql_setup.stat.exists == false and mysql_datadir_changed == true and mysql_datadir != "/var/lib/mysql"

    - name: Copy MySql file with owner and permissions
      ansible.posix.synchronize:
        src: /var/lib/mysql/
        dest: "{{ mysql_datadir }}"
        perms: yes
        owner: true
      delegate_to: "{{ inventory_hostname }}"
      when: mysql_setup.stat.exists == false and mysql_datadir_changed == true and mysql_datadir != "/var/lib/mysql"

    - name: Create new mysql.cnf
      template:
        src: "files/mysql.cnf.j2"
        dest: "/etc/mysql/conf.d/mysql.cnf"
        owner: root
        group: root
        mode: 0750
      when: mysql_setup.stat.exists == false
      notify: Restart MySQL

    - name: Start service mysql, if stopped
      ansible.builtin.service:
        name: mysql
        state: started

    - name: Sets the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when: mysql_root_password is defined and mysql_setup.stat.exists == false
      ignore_errors: yes

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Create Flarum database
      mysql_db:
        name: "{{ mysql_flarum_database }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present

    - name: Create Flarum MySQL user
      mysql_user:
        name: "{{ mysql_flarum_user }}"
        password: "{{ mysql_flarum_password }}"
        priv: "{{ mysql_flarum_database }}.*:ALL"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present

    - name: Create .setup flag
      file:
        path: "/etc/mysql/.setup"
        state: touch

    # UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

    # Install Composer without using installer
    # https://getcomposer.org/download
    - name: Composer | Install Composer latest-stable
      get_url:
        url: https://getcomposer.org/download/latest-stable/composer.phar
        checksum: 'sha256:https://getcomposer.org/download/latest-stable/composer.phar.sha256sum'
        dest: /usr/local/bin/composer.phar
        mode: 0755

    - name: Composer | Symlink composer.phar
      file:
        src: /usr/local/bin/composer.phar
        dest: /usr/bin/composer
        state: link

    # Install Cachetool
    # https://github.com/gordalina/cachetool
    - name: Cachetool | Install Cachetool latest-stable
      get_url:
        url: https://github.com/gordalina/cachetool/releases/latest/download/cachetool.phar
        dest: /usr/local/bin/cachetool.phar
        mode: 0755

    - name: Cachetool | Symlink cachetool.phar
      file:
        src: /usr/local/bin/cachetool.phar
        dest: /usr/bin/cachetool
        state: link

    - name: Creates health check directory
      file:
        path: "{{ healthcheck_root }}"
        state: directory
        owner: www-data
        group: www-data
        mode: 0770

    - name: Sets Up PHP Health Check Endpoint
      template:
        src: "files/health_check.php.j2"
        dest: "{{ healthcheck_root }}/index.php"

    - name: Check flarum project directory
      stat:
        path: "{{ flarum_project_root }}"
      register: flarum_directory

    - name: Creates flarum project directory
      file:
        path: "{{ flarum_project_root }}"
        state: directory
        owner: www-data
        group: www-data
        mode: 0770
      when: flarum_directory.stat.exists == false

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Restart MySQL
      service:
        name: mysql
        state: restarted